// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DidWorkloadRecordDao is the data access object for table did_workload_record.
type DidWorkloadRecordDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns DidWorkloadRecordColumns // columns contains all the column names of Table for convenient usage.
}

// DidWorkloadRecordColumns defines and stores column names for table did_workload_record.
type DidWorkloadRecordColumns struct {
	Id           string //
	MinerDid     string //
	ValidatorDid string //
	Sn           string //
	Model        string //
	Tracks       string //
	Qos          string //
	CreatedAt    string //
	UpdatedAt    string //
	DeletedAt    string //
}

// didWorkloadRecordColumns holds the columns for table did_workload_record.
var didWorkloadRecordColumns = DidWorkloadRecordColumns{
	Id:           "id",
	MinerDid:     "miner_did",
	ValidatorDid: "validator_did",
	Sn:           "sn",
	Model:        "model",
	Tracks:       "tracks",
	Qos:          "qos",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// NewDidWorkloadRecordDao creates and returns a new DAO object for table data access.
func NewDidWorkloadRecordDao() *DidWorkloadRecordDao {
	return &DidWorkloadRecordDao{
		group:   "default",
		table:   "did_workload_record",
		columns: didWorkloadRecordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DidWorkloadRecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DidWorkloadRecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DidWorkloadRecordDao) Columns() DidWorkloadRecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DidWorkloadRecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DidWorkloadRecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DidWorkloadRecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
