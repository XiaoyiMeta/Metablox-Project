// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MinerInfoDao is the data access object for table miner_info.
type MinerInfoDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns MinerInfoColumns // columns contains all the column names of Table for convenient usage.
}

// MinerInfoColumns defines and stores column names for table miner_info.
type MinerInfoColumns struct {
	Id              string // primary key
	Name            string //
	Did             string // miner did
	Sn              string // serial number
	Mac             string // mac address
	BrandName       string // brand name
	ModelName       string // Device Model Name
	WalletAddress   string // miner address
	IsVirtual       string // indicates if miner is virtual or not
	IsRegistered    string // indicates if miner is registered or not
	IsHidden        string // visible status
	LastHeartbeatAt string // the last heartbeat time
	FirstBootAt     string // the first boot time
	Ipv4            string // ipv4
	Ipv6            string // ipv6
	Latitude        string // latitude of miner location
	Longitude       string // longitude of miner location
	DeviceAddress   string // device address
	Hostname        string // Device Hostname
	System          string // System type and configuration
	Kernel          string // Operating System Kernel version
	BoardName       string // Board name
	ReleaseInfo     string // release infomation
	Disabled        string //
	CreatedAt       string // when a record was created
	UpdatedAt       string // when a record was updated
	DeletedAt       string // logic delete
	Remark          string //
}

// minerInfoColumns holds the columns for table miner_info.
var minerInfoColumns = MinerInfoColumns{
	Id:              "id",
	Name:            "name",
	Did:             "did",
	Sn:              "sn",
	Mac:             "mac",
	BrandName:       "brand_name",
	ModelName:       "model_name",
	WalletAddress:   "wallet_address",
	IsVirtual:       "is_virtual",
	IsRegistered:    "is_registered",
	IsHidden:        "is_hidden",
	LastHeartbeatAt: "last_heartbeat_at",
	FirstBootAt:     "first_boot_at",
	Ipv4:            "ipv4",
	Ipv6:            "ipv6",
	Latitude:        "latitude",
	Longitude:       "longitude",
	DeviceAddress:   "device_address",
	Hostname:        "hostname",
	System:          "system",
	Kernel:          "kernel",
	BoardName:       "board_name",
	ReleaseInfo:     "release_info",
	Disabled:        "disabled",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
	Remark:          "remark",
}

// NewMinerInfoDao creates and returns a new DAO object for table data access.
func NewMinerInfoDao() *MinerInfoDao {
	return &MinerInfoDao{
		group:   "default",
		table:   "miner_info",
		columns: minerInfoColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MinerInfoDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MinerInfoDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MinerInfoDao) Columns() MinerInfoColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MinerInfoDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MinerInfoDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MinerInfoDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
